/*
class Solution {
public:
    string multiply(string num1, string num2) {
        if (num1[0] == '0' || num2[0] == '0')   return "0";
        int len1 = num1.size(), len2 = num2.size();
        unordered_map<int, vector<int>> m;
        vector<int> product(len1 + len2, 0);
        vector<int> n1(len1);
        for (int i = 0; i < len1; ++i) {
            n1[i] = num1[i] - '0';
        }
        for (int i = len2 - 1; i >= 0; --i) {
            vector<int> temp(len1 + 1);
            int a = num2[i] - '0';
            if (m.find(a) != m.end()) {
                temp = m[a];
            } else {
                int cnt = 0;
                for (int j = len1; j > 0; --j) {
                    int p = n1[j - 1] * a + cnt; 
                    temp[j] = p  % 10;
                    cnt = p / 10;
                }
                temp[0] = cnt;
                m[a] = temp;
            }
            int cnt = 0;
            for (int j = len1; j >= 0; --j) {
                int s = cnt + product[j + i] + temp[j];
                product[j + i] = s % 10;
                cnt = s / 10;
            } 
        }
        string res = product[0] == 0 ? "" : to_string(product[0]);
        for (int i = 1; i < len1 + len2; ++i) {
            res += to_string(product[i]);
        }
        return res;
    }
};
*/
class Solution {
public:
    string multiply(string num1, string num2) {
        int len1 = num1.length(), len2 = num2.length();
        vector<int> p(len1 + len2);
        string res;
        for (int i = len1 - 1; i >= 0; --i) {
            for (int j = len2 - 1; j >= 0; --j) {
                int p1 = i + j, p2 = i + j + 1;
                int s = (num1[i] - '0') * (num2[j] - '0') + p[p2];
                p[p2] = s % 10;
                p[p1] += s /10;
            }
        }
        for (int i = 0; i < len1 + len2; ++i) {
            if (!(res.length() == 0 && p[i] == 0)) {
                res += to_string(p[i]);
            }
        }
        return res.length() == 0 ? "0" : res;
    }
};